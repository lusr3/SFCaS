// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_access.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5faccess_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_file_5faccess_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_file_5faccess_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5faccess_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_file_5faccess_2eproto;
namespace sfcas {
namespace fileaccess {
class DataReply;
struct DataReplyDefaultTypeInternal;
extern DataReplyDefaultTypeInternal _DataReply_default_instance_;
class DataRequest;
struct DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class MetaDataReply;
struct MetaDataReplyDefaultTypeInternal;
extern MetaDataReplyDefaultTypeInternal _MetaDataReply_default_instance_;
class MetaDataRequest;
struct MetaDataRequestDefaultTypeInternal;
extern MetaDataRequestDefaultTypeInternal _MetaDataRequest_default_instance_;
class StartUpMsg;
struct StartUpMsgDefaultTypeInternal;
extern StartUpMsgDefaultTypeInternal _StartUpMsg_default_instance_;
class StartUpReply;
struct StartUpReplyDefaultTypeInternal;
extern StartUpReplyDefaultTypeInternal _StartUpReply_default_instance_;
}  // namespace fileaccess
}  // namespace sfcas
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sfcas {
namespace fileaccess {
enum StartUpReply_ConnectState : int {
  StartUpReply_ConnectState_NEW = 0,
  StartUpReply_ConnectState_RECONNECT = 1,
  StartUpReply_ConnectState_BACKUP = 2,
  StartUpReply_ConnectState_ERROR = 3,
  StartUpReply_ConnectState_StartUpReply_ConnectState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StartUpReply_ConnectState_StartUpReply_ConnectState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StartUpReply_ConnectState_IsValid(int value);
extern const uint32_t StartUpReply_ConnectState_internal_data_[];
constexpr StartUpReply_ConnectState StartUpReply_ConnectState_ConnectState_MIN = static_cast<StartUpReply_ConnectState>(0);
constexpr StartUpReply_ConnectState StartUpReply_ConnectState_ConnectState_MAX = static_cast<StartUpReply_ConnectState>(3);
constexpr int StartUpReply_ConnectState_ConnectState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
StartUpReply_ConnectState_descriptor();
template <typename T>
const std::string& StartUpReply_ConnectState_Name(T value) {
  static_assert(std::is_same<T, StartUpReply_ConnectState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConnectState_Name().");
  return StartUpReply_ConnectState_Name(static_cast<StartUpReply_ConnectState>(value));
}
template <>
inline const std::string& StartUpReply_ConnectState_Name(StartUpReply_ConnectState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StartUpReply_ConnectState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool StartUpReply_ConnectState_Parse(absl::string_view name, StartUpReply_ConnectState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartUpReply_ConnectState>(
      StartUpReply_ConnectState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StartUpReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.StartUpReply) */ {
 public:
  inline StartUpReply() : StartUpReply(nullptr) {}
  ~StartUpReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StartUpReply(::google::protobuf::internal::ConstantInitialized);

  inline StartUpReply(const StartUpReply& from)
      : StartUpReply(nullptr, from) {}
  StartUpReply(StartUpReply&& from) noexcept
    : StartUpReply() {
    *this = ::std::move(from);
  }

  inline StartUpReply& operator=(const StartUpReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartUpReply& operator=(StartUpReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartUpReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartUpReply* internal_default_instance() {
    return reinterpret_cast<const StartUpReply*>(
               &_StartUpReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartUpReply& a, StartUpReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartUpReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartUpReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartUpReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartUpReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartUpReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StartUpReply& from) {
    StartUpReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StartUpReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.StartUpReply";
  }
  protected:
  explicit StartUpReply(::google::protobuf::Arena* arena);
  StartUpReply(::google::protobuf::Arena* arena, const StartUpReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ConnectState = StartUpReply_ConnectState;
  static constexpr ConnectState NEW = StartUpReply_ConnectState_NEW;
  static constexpr ConnectState RECONNECT = StartUpReply_ConnectState_RECONNECT;
  static constexpr ConnectState BACKUP = StartUpReply_ConnectState_BACKUP;
  static constexpr ConnectState ERROR = StartUpReply_ConnectState_ERROR;
  static inline bool ConnectState_IsValid(int value) {
    return StartUpReply_ConnectState_IsValid(value);
  }
  static constexpr ConnectState ConnectState_MIN = StartUpReply_ConnectState_ConnectState_MIN;
  static constexpr ConnectState ConnectState_MAX = StartUpReply_ConnectState_ConnectState_MAX;
  static constexpr int ConnectState_ARRAYSIZE = StartUpReply_ConnectState_ConnectState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ConnectState_descriptor() {
    return StartUpReply_ConnectState_descriptor();
  }
  template <typename T>
  static inline const std::string& ConnectState_Name(T value) {
    return StartUpReply_ConnectState_Name(value);
  }
  static inline bool ConnectState_Parse(absl::string_view name, ConnectState* value) {
    return StartUpReply_ConnectState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConnectStateFieldNumber = 1,
  };
  // .sfcas.fileaccess.StartUpReply.ConnectState connect_state = 1;
  void clear_connect_state() ;
  ::sfcas::fileaccess::StartUpReply_ConnectState connect_state() const;
  void set_connect_state(::sfcas::fileaccess::StartUpReply_ConnectState value);

  private:
  ::sfcas::fileaccess::StartUpReply_ConnectState _internal_connect_state() const;
  void _internal_set_connect_state(::sfcas::fileaccess::StartUpReply_ConnectState value);

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.StartUpReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int connect_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};// -------------------------------------------------------------------

class StartUpMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.StartUpMsg) */ {
 public:
  inline StartUpMsg() : StartUpMsg(nullptr) {}
  ~StartUpMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StartUpMsg(::google::protobuf::internal::ConstantInitialized);

  inline StartUpMsg(const StartUpMsg& from)
      : StartUpMsg(nullptr, from) {}
  StartUpMsg(StartUpMsg&& from) noexcept
    : StartUpMsg() {
    *this = ::std::move(from);
  }

  inline StartUpMsg& operator=(const StartUpMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartUpMsg& operator=(StartUpMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartUpMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartUpMsg* internal_default_instance() {
    return reinterpret_cast<const StartUpMsg*>(
               &_StartUpMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartUpMsg& a, StartUpMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(StartUpMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartUpMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartUpMsg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartUpMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartUpMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StartUpMsg& from) {
    StartUpMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StartUpMsg* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.StartUpMsg";
  }
  protected:
  explicit StartUpMsg(::google::protobuf::Arena* arena);
  StartUpMsg(::google::protobuf::Arena* arena, const StartUpMsg& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kGidFieldNumber = 1,
  };
  // string address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // uint64 file_size = 4;
  void clear_file_size() ;
  ::uint64_t file_size() const;
  void set_file_size(::uint64_t value);

  private:
  ::uint64_t _internal_file_size() const;
  void _internal_set_file_size(::uint64_t value);

  public:
  // int32 gid = 1;
  void clear_gid() ;
  ::int32_t gid() const;
  void set_gid(::int32_t value);

  private:
  ::int32_t _internal_gid() const;
  void _internal_set_gid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.StartUpMsg)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::uint64_t file_size_;
    ::int32_t gid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};// -------------------------------------------------------------------

class MetaDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.MetaDataRequest) */ {
 public:
  inline MetaDataRequest() : MetaDataRequest(nullptr) {}
  ~MetaDataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MetaDataRequest(::google::protobuf::internal::ConstantInitialized);

  inline MetaDataRequest(const MetaDataRequest& from)
      : MetaDataRequest(nullptr, from) {}
  MetaDataRequest(MetaDataRequest&& from) noexcept
    : MetaDataRequest() {
    *this = ::std::move(from);
  }

  inline MetaDataRequest& operator=(const MetaDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaDataRequest& operator=(MetaDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaDataRequest* internal_default_instance() {
    return reinterpret_cast<const MetaDataRequest*>(
               &_MetaDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaDataRequest& a, MetaDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaDataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaDataRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaDataRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetaDataRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MetaDataRequest& from) {
    MetaDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MetaDataRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.MetaDataRequest";
  }
  protected:
  explicit MetaDataRequest(::google::protobuf::Arena* arena);
  MetaDataRequest(::google::protobuf::Arena* arena, const MetaDataRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.MetaDataRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};// -------------------------------------------------------------------

class MetaDataReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.MetaDataReply) */ {
 public:
  inline MetaDataReply() : MetaDataReply(nullptr) {}
  ~MetaDataReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MetaDataReply(::google::protobuf::internal::ConstantInitialized);

  inline MetaDataReply(const MetaDataReply& from)
      : MetaDataReply(nullptr, from) {}
  MetaDataReply(MetaDataReply&& from) noexcept
    : MetaDataReply() {
    *this = ::std::move(from);
  }

  inline MetaDataReply& operator=(const MetaDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaDataReply& operator=(MetaDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaDataReply* internal_default_instance() {
    return reinterpret_cast<const MetaDataReply*>(
               &_MetaDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetaDataReply& a, MetaDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaDataReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaDataReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaDataReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetaDataReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MetaDataReply& from) {
    MetaDataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MetaDataReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.MetaDataReply";
  }
  protected:
  explicit MetaDataReply(::google::protobuf::Arena* arena);
  MetaDataReply(::google::protobuf::Arena* arena, const MetaDataReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kFileSizeFieldNumber = 2,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 file_size = 2;
  void clear_file_size() ;
  ::uint64_t file_size() const;
  void set_file_size(::uint64_t value);

  private:
  ::uint64_t _internal_file_size() const;
  void _internal_set_file_size(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.MetaDataReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::uint64_t file_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};// -------------------------------------------------------------------

class DataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.DataRequest) */ {
 public:
  inline DataRequest() : DataRequest(nullptr) {}
  ~DataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DataRequest(::google::protobuf::internal::ConstantInitialized);

  inline DataRequest(const DataRequest& from)
      : DataRequest(nullptr, from) {}
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DataRequest& from) {
    DataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.DataRequest";
  }
  protected:
  explicit DataRequest(::google::protobuf::Arena* arena);
  DataRequest(::google::protobuf::Arena* arena, const DataRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // uint64 offset = 2;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // uint64 size = 3;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.DataRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::uint64_t offset_;
    ::uint64_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};// -------------------------------------------------------------------

class DataReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sfcas.fileaccess.DataReply) */ {
 public:
  inline DataReply() : DataReply(nullptr) {}
  ~DataReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DataReply(::google::protobuf::internal::ConstantInitialized);

  inline DataReply(const DataReply& from)
      : DataReply(nullptr, from) {}
  DataReply(DataReply&& from) noexcept
    : DataReply() {
    *this = ::std::move(from);
  }

  inline DataReply& operator=(const DataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataReply& operator=(DataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataReply* internal_default_instance() {
    return reinterpret_cast<const DataReply*>(
               &_DataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataReply& a, DataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DataReply& from) {
    DataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sfcas.fileaccess.DataReply";
  }
  protected:
  explicit DataReply(::google::protobuf::Arena* arena);
  DataReply(::google::protobuf::Arena* arena, const DataReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // @@protoc_insertion_point(class_scope:sfcas.fileaccess.DataReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5faccess_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MetaDataRequest

// string filename = 1;
inline void MetaDataRequest::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& MetaDataRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.MetaDataRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaDataRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.MetaDataRequest.filename)
}
inline std::string* MetaDataRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.MetaDataRequest.filename)
  return _s;
}
inline const std::string& MetaDataRequest::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void MetaDataRequest::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* MetaDataRequest::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* MetaDataRequest::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.MetaDataRequest.filename)
  return _impl_.filename_.Release();
}
inline void MetaDataRequest::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.MetaDataRequest.filename)
}

// -------------------------------------------------------------------

// MetaDataReply

// string address = 1;
inline void MetaDataReply::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MetaDataReply::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.MetaDataReply.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetaDataReply::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.MetaDataReply.address)
}
inline std::string* MetaDataReply::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.MetaDataReply.address)
  return _s;
}
inline const std::string& MetaDataReply::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void MetaDataReply::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* MetaDataReply::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* MetaDataReply::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.MetaDataReply.address)
  return _impl_.address_.Release();
}
inline void MetaDataReply::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.MetaDataReply.address)
}

// uint64 file_size = 2;
inline void MetaDataReply::clear_file_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_size_ = ::uint64_t{0u};
}
inline ::uint64_t MetaDataReply::file_size() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.MetaDataReply.file_size)
  return _internal_file_size();
}
inline void MetaDataReply::set_file_size(::uint64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.MetaDataReply.file_size)
}
inline ::uint64_t MetaDataReply::_internal_file_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_size_;
}
inline void MetaDataReply::_internal_set_file_size(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_size_ = value;
}

// -------------------------------------------------------------------

// StartUpMsg

// int32 gid = 1;
inline void StartUpMsg::clear_gid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gid_ = 0;
}
inline ::int32_t StartUpMsg::gid() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.StartUpMsg.gid)
  return _internal_gid();
}
inline void StartUpMsg::set_gid(::int32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.StartUpMsg.gid)
}
inline ::int32_t StartUpMsg::_internal_gid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gid_;
}
inline void StartUpMsg::_internal_set_gid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gid_ = value;
}

// string address = 2;
inline void StartUpMsg::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& StartUpMsg::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.StartUpMsg.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartUpMsg::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.StartUpMsg.address)
}
inline std::string* StartUpMsg::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.StartUpMsg.address)
  return _s;
}
inline const std::string& StartUpMsg::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void StartUpMsg::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* StartUpMsg::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* StartUpMsg::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.StartUpMsg.address)
  return _impl_.address_.Release();
}
inline void StartUpMsg::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.StartUpMsg.address)
}

// string filename = 3;
inline void StartUpMsg::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& StartUpMsg::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.StartUpMsg.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartUpMsg::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.StartUpMsg.filename)
}
inline std::string* StartUpMsg::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.StartUpMsg.filename)
  return _s;
}
inline const std::string& StartUpMsg::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void StartUpMsg::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* StartUpMsg::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* StartUpMsg::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.StartUpMsg.filename)
  return _impl_.filename_.Release();
}
inline void StartUpMsg::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.StartUpMsg.filename)
}

// uint64 file_size = 4;
inline void StartUpMsg::clear_file_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_size_ = ::uint64_t{0u};
}
inline ::uint64_t StartUpMsg::file_size() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.StartUpMsg.file_size)
  return _internal_file_size();
}
inline void StartUpMsg::set_file_size(::uint64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.StartUpMsg.file_size)
}
inline ::uint64_t StartUpMsg::_internal_file_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_size_;
}
inline void StartUpMsg::_internal_set_file_size(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_size_ = value;
}

// -------------------------------------------------------------------

// StartUpReply

// .sfcas.fileaccess.StartUpReply.ConnectState connect_state = 1;
inline void StartUpReply::clear_connect_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connect_state_ = 0;
}
inline ::sfcas::fileaccess::StartUpReply_ConnectState StartUpReply::connect_state() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.StartUpReply.connect_state)
  return _internal_connect_state();
}
inline void StartUpReply::set_connect_state(::sfcas::fileaccess::StartUpReply_ConnectState value) {
  _internal_set_connect_state(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.StartUpReply.connect_state)
}
inline ::sfcas::fileaccess::StartUpReply_ConnectState StartUpReply::_internal_connect_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::sfcas::fileaccess::StartUpReply_ConnectState>(_impl_.connect_state_);
}
inline void StartUpReply::_internal_set_connect_state(::sfcas::fileaccess::StartUpReply_ConnectState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.connect_state_ = value;
}

// -------------------------------------------------------------------

// DataRequest

// string filename = 1;
inline void DataRequest::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& DataRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.DataRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.DataRequest.filename)
}
inline std::string* DataRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.DataRequest.filename)
  return _s;
}
inline const std::string& DataRequest::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void DataRequest::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* DataRequest::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* DataRequest::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.DataRequest.filename)
  return _impl_.filename_.Release();
}
inline void DataRequest::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.DataRequest.filename)
}

// uint64 offset = 2;
inline void DataRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t DataRequest::offset() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.DataRequest.offset)
  return _internal_offset();
}
inline void DataRequest::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.DataRequest.offset)
}
inline ::uint64_t DataRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void DataRequest::_internal_set_offset(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// uint64 size = 3;
inline void DataRequest::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t DataRequest::size() const {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.DataRequest.size)
  return _internal_size();
}
inline void DataRequest::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.DataRequest.size)
}
inline ::uint64_t DataRequest::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void DataRequest::_internal_set_size(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// DataReply

// bytes chunk = 1;
inline void DataReply::clear_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& DataReply::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sfcas.fileaccess.DataReply.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataReply::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sfcas.fileaccess.DataReply.chunk)
}
inline std::string* DataReply::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:sfcas.fileaccess.DataReply.chunk)
  return _s;
}
inline const std::string& DataReply::_internal_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_.Get();
}
inline void DataReply::_internal_set_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* DataReply::_internal_mutable_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* DataReply::release_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:sfcas.fileaccess.DataReply.chunk)
  return _impl_.chunk_.Release();
}
inline void DataReply::set_allocated_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_.IsDefault()) {
          _impl_.chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sfcas.fileaccess.DataReply.chunk)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fileaccess
}  // namespace sfcas


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sfcas::fileaccess::StartUpReply_ConnectState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sfcas::fileaccess::StartUpReply_ConnectState>() {
  return ::sfcas::fileaccess::StartUpReply_ConnectState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_file_5faccess_2eproto_2epb_2eh
