// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_access.proto
#ifndef GRPC_file_5faccess_2eproto__INCLUDED
#define GRPC_file_5faccess_2eproto__INCLUDED

#include "file_access.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sfcas {
namespace fileaccess {

class FileAccess final {
 public:
  static constexpr char const* service_full_name() {
    return "sfcas.fileaccess.FileAccess";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 存储机与 master
    virtual ::grpc::Status connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::sfcas::fileaccess::StartUpReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>> Asyncconnect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>>(Asyncconnect_to_masterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>> PrepareAsyncconnect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>>(PrepareAsyncconnect_to_masterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::sfcas::fileaccess::StartUpMsg>> upload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::sfcas::fileaccess::StartUpMsg>>(upload_metadataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>> Asyncupload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>>(Asyncupload_metadataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>> PrepareAsyncupload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>>(PrepareAsyncupload_metadataRaw(context, response, cq));
    }
    // client 获取存储机位置和数据
    virtual ::grpc::Status get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::sfcas::fileaccess::MetaDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>> Asyncget_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>>(Asyncget_file_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>> PrepareAsyncget_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>>(PrepareAsyncget_file_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sfcas::fileaccess::DataReply>> get_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sfcas::fileaccess::DataReply>>(get_dataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>> Asyncget_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>>(Asyncget_dataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>> PrepareAsyncget_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>>(PrepareAsyncget_dataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 存储机与 master
      virtual void connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void upload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::sfcas::fileaccess::StartUpMsg>* reactor) = 0;
      // client 获取存储机位置和数据
      virtual void get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest* request, ::grpc::ClientReadReactor< ::sfcas::fileaccess::DataReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>* Asyncconnect_to_masterRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::StartUpReply>* PrepareAsyncconnect_to_masterRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::sfcas::fileaccess::StartUpMsg>* upload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>* Asyncupload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sfcas::fileaccess::StartUpMsg>* PrepareAsyncupload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>* Asyncget_file_metadataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sfcas::fileaccess::MetaDataReply>* PrepareAsyncget_file_metadataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sfcas::fileaccess::DataReply>* get_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>* Asyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sfcas::fileaccess::DataReply>* PrepareAsyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::sfcas::fileaccess::StartUpReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>> Asyncconnect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>>(Asyncconnect_to_masterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>> PrepareAsyncconnect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>>(PrepareAsyncconnect_to_masterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::sfcas::fileaccess::StartUpMsg>> upload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::sfcas::fileaccess::StartUpMsg>>(upload_metadataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>> Asyncupload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>>(Asyncupload_metadataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>> PrepareAsyncupload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>>(PrepareAsyncupload_metadataRaw(context, response, cq));
    }
    ::grpc::Status get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::sfcas::fileaccess::MetaDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>> Asyncget_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>>(Asyncget_file_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>> PrepareAsyncget_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>>(PrepareAsyncget_file_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sfcas::fileaccess::DataReply>> get_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sfcas::fileaccess::DataReply>>(get_dataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>> Asyncget_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>>(Asyncget_dataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>> PrepareAsyncget_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>>(PrepareAsyncget_dataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response, std::function<void(::grpc::Status)>) override;
      void connect_to_master(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void upload_metadata(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::sfcas::fileaccess::StartUpMsg>* reactor) override;
      void get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response, std::function<void(::grpc::Status)>) override;
      void get_file_metadata(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_data(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest* request, ::grpc::ClientReadReactor< ::sfcas::fileaccess::DataReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>* Asyncconnect_to_masterRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::StartUpReply>* PrepareAsyncconnect_to_masterRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::StartUpMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::sfcas::fileaccess::StartUpMsg>* upload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>* Asyncupload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::sfcas::fileaccess::StartUpMsg>* PrepareAsyncupload_metadataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>* Asyncget_file_metadataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sfcas::fileaccess::MetaDataReply>* PrepareAsyncget_file_metadataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::MetaDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sfcas::fileaccess::DataReply>* get_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request) override;
    ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>* Asyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sfcas::fileaccess::DataReply>* PrepareAsyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas::fileaccess::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_connect_to_master_;
    const ::grpc::internal::RpcMethod rpcmethod_upload_metadata_;
    const ::grpc::internal::RpcMethod rpcmethod_get_file_metadata_;
    const ::grpc::internal::RpcMethod rpcmethod_get_data_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 存储机与 master
    virtual ::grpc::Status connect_to_master(::grpc::ServerContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response);
    virtual ::grpc::Status upload_metadata(::grpc::ServerContext* context, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* reader, ::google::protobuf::Empty* response);
    // client 获取存储机位置和数据
    virtual ::grpc::Status get_file_metadata(::grpc::ServerContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response);
    virtual ::grpc::Status get_data(::grpc::ServerContext* context, const ::sfcas::fileaccess::DataRequest* request, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_connect_to_master() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect_to_master(::grpc::ServerContext* context, ::sfcas::fileaccess::StartUpMsg* request, ::grpc::ServerAsyncResponseWriter< ::sfcas::fileaccess::StartUpReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_upload_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_upload_metadata() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_upload_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload_metadata(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupload_metadata(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::sfcas::fileaccess::StartUpMsg>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_file_metadata(::grpc::ServerContext* context, ::sfcas::fileaccess::MetaDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::sfcas::fileaccess::MetaDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_data() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_data(::grpc::ServerContext* context, ::sfcas::fileaccess::DataRequest* request, ::grpc::ServerAsyncWriter< ::sfcas::fileaccess::DataReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_connect_to_master<WithAsyncMethod_upload_metadata<WithAsyncMethod_get_file_metadata<WithAsyncMethod_get_data<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_connect_to_master() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sfcas::fileaccess::StartUpMsg, ::sfcas::fileaccess::StartUpReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sfcas::fileaccess::StartUpMsg* request, ::sfcas::fileaccess::StartUpReply* response) { return this->connect_to_master(context, request, response); }));}
    void SetMessageAllocatorFor_connect_to_master(
        ::grpc::MessageAllocator< ::sfcas::fileaccess::StartUpMsg, ::sfcas::fileaccess::StartUpReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sfcas::fileaccess::StartUpMsg, ::sfcas::fileaccess::StartUpReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect_to_master(
      ::grpc::CallbackServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_upload_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_upload_metadata() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::sfcas::fileaccess::StartUpMsg, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::google::protobuf::Empty* response) { return this->upload_metadata(context, response); }));
    }
    ~WithCallbackMethod_upload_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload_metadata(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::sfcas::fileaccess::StartUpMsg>* upload_metadata(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sfcas::fileaccess::MetaDataRequest, ::sfcas::fileaccess::MetaDataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sfcas::fileaccess::MetaDataRequest* request, ::sfcas::fileaccess::MetaDataReply* response) { return this->get_file_metadata(context, request, response); }));}
    void SetMessageAllocatorFor_get_file_metadata(
        ::grpc::MessageAllocator< ::sfcas::fileaccess::MetaDataRequest, ::sfcas::fileaccess::MetaDataReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sfcas::fileaccess::MetaDataRequest, ::sfcas::fileaccess::MetaDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_file_metadata(
      ::grpc::CallbackServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_data() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sfcas::fileaccess::DataRequest, ::sfcas::fileaccess::DataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sfcas::fileaccess::DataRequest* request) { return this->get_data(context, request); }));
    }
    ~WithCallbackMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sfcas::fileaccess::DataReply>* get_data(
      ::grpc::CallbackServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_connect_to_master<WithCallbackMethod_upload_metadata<WithCallbackMethod_get_file_metadata<WithCallbackMethod_get_data<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_connect_to_master() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_upload_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_upload_metadata() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_upload_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload_metadata(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_data() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_connect_to_master() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect_to_master(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_upload_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_upload_metadata() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_upload_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload_metadata(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupload_metadata(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_file_metadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_data() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_data(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_connect_to_master() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->connect_to_master(context, request, response); }));
    }
    ~WithRawCallbackMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect_to_master(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_upload_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_upload_metadata() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->upload_metadata(context, response); }));
    }
    ~WithRawCallbackMethod_upload_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status upload_metadata(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sfcas::fileaccess::StartUpMsg>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* upload_metadata(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_file_metadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_file_metadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_data() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->get_data(context, request); }));
    }
    ~WithRawCallbackMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* get_data(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_connect_to_master : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_connect_to_master() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sfcas::fileaccess::StartUpMsg, ::sfcas::fileaccess::StartUpReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sfcas::fileaccess::StartUpMsg, ::sfcas::fileaccess::StartUpReply>* streamer) {
                       return this->Streamedconnect_to_master(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_connect_to_master() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connect_to_master(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::StartUpMsg* /*request*/, ::sfcas::fileaccess::StartUpReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconnect_to_master(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sfcas::fileaccess::StartUpMsg,::sfcas::fileaccess::StartUpReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_file_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_file_metadata() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sfcas::fileaccess::MetaDataRequest, ::sfcas::fileaccess::MetaDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sfcas::fileaccess::MetaDataRequest, ::sfcas::fileaccess::MetaDataReply>* streamer) {
                       return this->Streamedget_file_metadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_file_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_file_metadata(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::MetaDataRequest* /*request*/, ::sfcas::fileaccess::MetaDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_file_metadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sfcas::fileaccess::MetaDataRequest,::sfcas::fileaccess::MetaDataReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_connect_to_master<WithStreamedUnaryMethod_get_file_metadata<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_get_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_get_data() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sfcas::fileaccess::DataRequest, ::sfcas::fileaccess::DataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sfcas::fileaccess::DataRequest, ::sfcas::fileaccess::DataReply>* streamer) {
                       return this->Streamedget_data(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_get_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_data(::grpc::ServerContext* /*context*/, const ::sfcas::fileaccess::DataRequest* /*request*/, ::grpc::ServerWriter< ::sfcas::fileaccess::DataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedget_data(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sfcas::fileaccess::DataRequest,::sfcas::fileaccess::DataReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_get_data<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_connect_to_master<WithStreamedUnaryMethod_get_file_metadata<WithSplitStreamingMethod_get_data<Service > > > StreamedService;
};

}  // namespace fileaccess
}  // namespace sfcas


#endif  // GRPC_file_5faccess_2eproto__INCLUDED
