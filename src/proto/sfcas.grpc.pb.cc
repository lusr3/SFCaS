// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sfcas.proto

#include "sfcas.pb.h"
#include "sfcas.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sfcas_dfs {

static const char* FileAccess_method_names[] = {
  "/sfcas_dfs.FileAccess/get_file_location",
  "/sfcas_dfs.FileAccess/get_data",
};

std::unique_ptr< FileAccess::Stub> FileAccess::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileAccess::Stub> stub(new FileAccess::Stub(channel, options));
  return stub;
}

FileAccess::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_file_location_(FileAccess_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_data_(FileAccess_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status FileAccess::Stub::get_file_location(::grpc::ClientContext* context, const ::sfcas_dfs::LocationRequest& request, ::sfcas_dfs::LocationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sfcas_dfs::LocationRequest, ::sfcas_dfs::LocationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_file_location_, context, request, response);
}

void FileAccess::Stub::async::get_file_location(::grpc::ClientContext* context, const ::sfcas_dfs::LocationRequest* request, ::sfcas_dfs::LocationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sfcas_dfs::LocationRequest, ::sfcas_dfs::LocationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_file_location_, context, request, response, std::move(f));
}

void FileAccess::Stub::async::get_file_location(::grpc::ClientContext* context, const ::sfcas_dfs::LocationRequest* request, ::sfcas_dfs::LocationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_file_location_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sfcas_dfs::LocationReply>* FileAccess::Stub::PrepareAsyncget_file_locationRaw(::grpc::ClientContext* context, const ::sfcas_dfs::LocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sfcas_dfs::LocationReply, ::sfcas_dfs::LocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_file_location_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sfcas_dfs::LocationReply>* FileAccess::Stub::Asyncget_file_locationRaw(::grpc::ClientContext* context, const ::sfcas_dfs::LocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_file_locationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sfcas_dfs::DataReply>* FileAccess::Stub::get_dataRaw(::grpc::ClientContext* context, const ::sfcas_dfs::DataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sfcas_dfs::DataReply>::Create(channel_.get(), rpcmethod_get_data_, context, request);
}

void FileAccess::Stub::async::get_data(::grpc::ClientContext* context, const ::sfcas_dfs::DataRequest* request, ::grpc::ClientReadReactor< ::sfcas_dfs::DataReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sfcas_dfs::DataReply>::Create(stub_->channel_.get(), stub_->rpcmethod_get_data_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sfcas_dfs::DataReply>* FileAccess::Stub::Asyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas_dfs::DataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sfcas_dfs::DataReply>::Create(channel_.get(), cq, rpcmethod_get_data_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sfcas_dfs::DataReply>* FileAccess::Stub::PrepareAsyncget_dataRaw(::grpc::ClientContext* context, const ::sfcas_dfs::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sfcas_dfs::DataReply>::Create(channel_.get(), cq, rpcmethod_get_data_, context, request, false, nullptr);
}

FileAccess::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileAccess_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileAccess::Service, ::sfcas_dfs::LocationRequest, ::sfcas_dfs::LocationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileAccess::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sfcas_dfs::LocationRequest* req,
             ::sfcas_dfs::LocationReply* resp) {
               return service->get_file_location(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileAccess_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileAccess::Service, ::sfcas_dfs::DataRequest, ::sfcas_dfs::DataReply>(
          [](FileAccess::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sfcas_dfs::DataRequest* req,
             ::grpc::ServerWriter<::sfcas_dfs::DataReply>* writer) {
               return service->get_data(ctx, req, writer);
             }, this)));
}

FileAccess::Service::~Service() {
}

::grpc::Status FileAccess::Service::get_file_location(::grpc::ServerContext* context, const ::sfcas_dfs::LocationRequest* request, ::sfcas_dfs::LocationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileAccess::Service::get_data(::grpc::ServerContext* context, const ::sfcas_dfs::DataRequest* request, ::grpc::ServerWriter< ::sfcas_dfs::DataReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sfcas_dfs

